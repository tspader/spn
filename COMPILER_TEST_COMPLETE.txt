===========================================
COMPLETE LIBRARY COMPILATION TEST RESULTS
===========================================

Test Date: 2025-10-23
Compilers: GCC 13.3.0, musl-gcc (musl 1.2.4), TCC 0.9.28rc

==========================================
CATEGORY 1: SIMPLE C LIBRARIES (Header-only/Source-only)
==========================================
All tested with simple compilation (no build system)

1. argparse        gcc:✅  musl-gcc:✅  tcc:✅
2. cjson           gcc:✅  musl-gcc:✅  tcc:✅
3. clay            gcc:✅  musl-gcc:✅  tcc:✅ (requires CLAY_DISABLE_SIMD)
4. dr_libs         gcc:✅  musl-gcc:✅  tcc:✅
5. hmm             gcc:✅  musl-gcc:✅  tcc:✅
6. incbin          gcc:✅  musl-gcc:✅  tcc:✅
7. linenoise       gcc:✅  musl-gcc:✅  tcc:✅
8. microui         gcc:✅  musl-gcc:✅  tcc:✅
9. miniz           gcc:✅  musl-gcc:✅  tcc:✅
10. mongoose       gcc:✅  musl-gcc:✅  tcc:✅
11. nuklear        gcc:✅  musl-gcc:✅  tcc:✅
12. sds            gcc:✅  musl-gcc:✅  tcc:✅
13. sokol          gcc:✅  musl-gcc:✅  tcc:✅
14. stb            gcc:✅  musl-gcc:✅  tcc:✅ (requires STBI_NO_SIMD)
15. toml           gcc:✅  musl-gcc:✅  tcc:✅
16. utest          gcc:✅  musl-gcc:✅  tcc:✅

==========================================
CATEGORY 2: CONFIGURE-BASED BUILDS
==========================================

17. sqlite         gcc:✅  musl-gcc:✅  tcc:✅ (requires -D_LARGEFILE64_SOURCE)

==========================================
CATEGORY 3: MAKE-BASED BUILDS
==========================================

18. quickjs        gcc:✅  musl-gcc:✅  tcc:✅
19. tree-sitter    gcc:✅  musl-gcc:✅  tcc:✅
20. luajit         gcc:✅  musl-gcc:⚠️  tcc:❌
    (musl-gcc: static lib only; tcc: missing JIT defines)

==========================================
CATEGORY 4: CMAKE-BASED BUILDS
==========================================

21. md4c           gcc:✅  musl-gcc:✅  tcc:✅
22. msgpack        gcc:✅  musl-gcc:✅  tcc:✅
23. uv (libuv)     gcc:✅  musl-gcc:❌  tcc:✅
    (musl-gcc: missing linux/errqueue.h kernel header)

24. freetype       gcc:✅  musl-gcc:❌  tcc:✅
    (musl-gcc: missing glibc bits headers)

25. git (libgit2)  gcc:✅  musl-gcc:❌  tcc:❌
    (musl-gcc: build errors; tcc: missing atomics support)

==========================================
CATEGORY 5: C++ LIBRARIES
==========================================

26. cr             g++:✅  musl-g++:❌  tcc:❌
    (musl-g++ not available; tcc has no C++ support)

27. ggml           g++:✅  musl-g++:❌  tcc:❌
    (musl-g++ not available; tcc has no C++ support)

28. whisper        g++:✅  musl-g++:❌  tcc:❌
    (musl-g++ not available; tcc has no C++ support)

29. imgui          g++:✅  musl-g++:❌  tcc:❌
    (musl-g++ not available; tcc has no C++ support)

==========================================
CATEGORY 6: NOT TESTED - COMPLEX GRAPHICS/SYSTEM DEPENDENCIES
==========================================

30. curl      - Requires OpenSSL/TLS libraries and extensive cmake setup
31. glfw      - Requires X11/Wayland/graphics system libraries
32. raylib    - Requires graphics/audio/input system libraries
33. sdl3      - Requires graphics/audio/input system libraries
34. sodium    - Requires autogen.sh + autotools (not attempted)

==========================================
FINAL STATISTICS
==========================================

Total Libraries: 35

Pure C Libraries Tested: 25
  - Simple C (no build system): 16/16 = 100%
  - Configure-based: 1/1 = 100%
  - Make-based: 3/3 = 100%
  - CMake-based: 5/5 = 100%

C++ Libraries: 4 (tested with g++ only)

Not Tested: 5 (complex external dependencies)

BY COMPILER:
  GCC:      25/25 pure C (100%), 4/4 C++ (100%)
  musl-gcc: 21/25 pure C (84%)
  TCC:      22/25 pure C (88%)

TCC SUCCESS WITH WORKAROUNDS:
  - 19/25 work perfectly (76%)
  - 3 more work with defines (88% total)
  - 3 fail due to limitations (atomics, musl compat)

MUSL-GCC LIMITATIONS:
  - Missing kernel headers (linux/errqueue.h)
  - Missing glibc-specific headers
  - No C++ compiler in standard install
  - Otherwise 100% compatible with simple C code

TCC LIMITATIONS:
  - No C++ support
  - Missing SSE intrinsics headers (workaround: disable SIMD)
  - Missing large file support defines (workaround: -D_LARGEFILE64_SOURCE)
  - Missing atomic operations detection (incompatible with libgit2)
  - Cannot compile JIT code generators (luajit)

==========================================
CONCLUSION
==========================================

TCC: Excellent for simple C libraries (88% success), perfect for embedded/minimal environments
musl-gcc: Excellent for pure C static linking (84% success), issues with some system headers
GCC: Perfect compatibility (100% of all tested code)

All three compilers handle:
- Header-only libraries
- Simple source libraries
- Basic build systems (make, configure, cmake)

TCC shines at:
- Fast compilation
- Small footprint
- Simple C projects
- Prototyping

Best avoided with TCC:
- C++ projects
- Libraries requiring atomics
- JIT compilers
- Projects with heavy SIMD without fallbacks
